# -*- coding: utf-8 -*-
"""TP1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QiZ2tJ9OeI3m1bqVnddfjKnwMWB5KSj8
"""

from MRE import Job

root_path = "./"
inputDir = root_path + "TP1/input/"
tempDir = root_path + "TP1a/output/temp"
outputDir = root_path + "TP1a/output/"

def fmap1(key, value, context):
  data = value.split()
  id_mission = data[0]
  context.write(id_mission, 1)

def fcom1(key, values, context):
  sum = 0
  for v in values:
    sum += v
  context.write(key, sum)

def fred1(key, values, context):
  total = 0
  for v in values:
    total += v
  context.write(key, total)

def fmap2(key, value, context):
  context.write("max", (key, int(value)))

def fcom2(key, values, context):
  max_mission = None
  max_count = 0
  for mission, count in values:
    if count > max_count:
      max_count = count
      max_mission = mission
  context.write(key, (max_mission, max_count))

def fred2(key, values, context):
  max_mission = None
  max_count = 0
  for mission, count in values:
    if count > max_count:
      max_count = count
      max_mission = mission
  context.write("", f"Misión más jugada, la {max_mission}, con {max_count} veces en total.")

job1 = Job(inputDir, tempDir, fmap1, fred1)
job1.setCombiner(fcom1)
success = job1.waitForCompletion()

job2 = Job(tempDir, outputDir, fmap2, fred2)
job2.setCombiner(fcom2)
success = job2.waitForCompletion()

root_path = "./"
inputDir = root_path + "TP1/input/"
tempDir = root_path + "TP1b/output/temp"
outputDir = root_path + "TP1b/output/"

def fmap1(key, value, context):
  data = value.split()
  id_mission = data[0]
  heroes = data[1:6]
  for hero in heroes:
    context.write((id_mission, hero), 1)

def fcom1(key, values, context):
  sum = 0
  for v in values:
    sum += v
  context.write(key, sum)

def fred1(key, values, context):
  total = 0
  for v in values:
    total += v
  context.write("", (key, total))

def fmap2(key, value, context):
  data = value.split()
  id_mission, hero, count = data[0], str(data[1]), int(data[2])
  context.write(id_mission, ([hero], count))

def fcom2(key, values, context):
  max_hero = None
  max_count = 0
  for hero, count in values:
    if count > max_count:
      max_count = count
      max_hero = hero
    elif count == max_count:
      max_hero.append(hero[0])
  context.write(key, (max_hero, max_count))

def fred2(key, values, context):
  max_hero = None
  max_count = 0
  for hero, count in values:
    if count > max_count:
      max_count = count
      max_hero = hero
    elif count == max_count:
      max_hero.append(hero[0])
  if len(max_hero) == 1:
    context.write("", f"Misión {key} ==> héroe {max_hero[0]} ({max_count} veces)")
  else:
    heroes_text = ", ".join(max_hero[:-1]) + " y " + max_hero[-1]
    context.write("", f"Misión {key} ==> héroes {heroes_text} ({max_count} veces)")



job1 = Job(inputDir, tempDir, fmap1, fred1)
job1.setCombiner(fcom1)
success = job1.waitForCompletion()

job2 = Job(tempDir, outputDir, fmap2, fred2)
job2.setCombiner(fcom2)
success = job2.waitForCompletion()

root_path = "./"
inputDir = root_path + "TP1/input/"
tempDir = root_path + "TP1c/output/temp"
outputDir = root_path + "TP1c/output/"

def fmap1(key, value, context):
  id_player = key
  data = value.split()
  heroes = data[1:6]
  for hero in set(heroes):
    context.write((id_player, hero), "")

def fred1(key, values, context):
  id_player = key[0]
  context.write("", (id_player))

def fmap2(key, value, context):
  id_player = value
  context.write(id_player, 1)

def fcom2(key, values, context):
  sum = 0
  for v in values:
    sum += v
  context.write(key, sum)

def fred2(key, values, context):
  total = 0
  for v in values:
    total += v
  if total > context["H"]:
    context.write("", f"Jugador {key} usó {total} heroes distintos")

job1 = Job(inputDir, tempDir, fmap1, fred1)
success = job1.waitForCompletion()
job2 = Job(tempDir, outputDir, fmap2, fred2)
job2.setParams({"H": 20})
success = job2.waitForCompletion()

root_path = "./"
inputDir = root_path + "TP1/input/"
tempDir1 = root_path + "TP1d/output/temp1"
tempDir2 = root_path + "TP1d/output/temp2"
outputDir1 = root_path + "TP1d/output/1"
outputDir2 = root_path + "TP1d/output/2"

def fmap1(key, value, context):
  data = value.split()
  id_mission = data[0]
  time = int(data[7])
  id_player = key
  context.write((id_mission, id_player), time)

def fcom1(key, values, context):
  time_sum = 0
  for v in values:
    time_sum += v
  context.write(key, time_sum)

def fred1(key, values, context):
  time_total = 0
  for v in values:
    time_total += v
  id_mission = key[0]
  context.write("", (id_mission, time_total))

def fmap2(key, value, context):
  data = value.split()
  id_mission, time_total = data[0], int(data[1])
  context.write(id_mission, (1, time_total))

def fcom2(key, values, context):
  sum = 0
  time_total = 0
  for v in values:
    sum += v[0]
    time_total += v[1]
  context.write(key, (sum, time_total))

def fred2(key, values, context):
  total = 0
  time_total = 0
  for v in values:
    total += v[0]
    time_total += v[1]
  context.write("", (key, total, time_total))

def fmap3(key, value, context):
  data = value.split()
  id_mission, count, time_total = data[0], int(data[1]), int(data[2])
  context.write("max", (id_mission, count, time_total))

def fcom3(key, values, context):
  max_mission = None
  max_count = 0
  max_time_total = 0
  for mission, count, time_total in values:
    if count > max_count:
      max_count = count
      max_mission = mission
      max_time_total = time_total
  context.write(key, (max_mission, max_count, time_total))

def fred3(key, values, context):
  max_mission = None
  max_count = 0
  max_time_total = 0
  for mission, count, time_total in values:
    if count > max_count:
      max_count = count
      max_mission = mission
      max_time_total = time_total
  context.write("", (max_mission, f"La misión más jugada es la {max_mission} con {max_count} jugadores distintos y {max_time_total} segundos de juego"))

def fmap4(key, value, context):
  data = value.split()
  id_player = key
  id_mission = data[0]
  points = int(data[6])
  if id_mission == context["MAX_MISSION"]:
    context.write(id_player, (1, points))

def fcom4(key, values, context):
  participations_sum = 0
  points_sum = 0
  for participations, points in values:
    participations_sum += participations
    points_sum += points
  context.write(key, (participations_sum, points_sum))

def fred4(key, values, context):
  participations_total = 0
  points_total = 0
  for participations, points in values:
    participations_total += participations
    points_total += points
  if participations_total >= context["N"] and points_total > context["P"]:
    context.write("", (f"Jugador {key}, participó {participations_total} veces con {points_total} en total"))

job1 = Job(inputDir, tempDir1, fmap1, fred1)
job1.setCombiner(fcom1)
success = job1.waitForCompletion()

job2 = Job(tempDir1, tempDir2, fmap2, fred2)
job2.setCombiner(fcom2)
success = job2.waitForCompletion()

job3 = Job(tempDir2, outputDir1, fmap3, fred3)
job3.setCombiner(fcom3)
success = job3.waitForCompletion()


with open(outputDir1 + "/output.txt", "r") as f:
  data = f.readline()
  max_mission = data.split()[0]

job4 = Job(inputDir, outputDir2, fmap4, fred4)
job4.setParams({"N": 1, "P": 5000, "MAX_MISSION": max_mission})
job4.setCombiner(fcom4)
success = job4.waitForCompletion()